name: Build and Push Dify Images to GHCR

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 修改步骤：从正确位置获取 Dockerfile 文件
    - name: Get Dockerfiles from correct locations
      run: |
        echo "正在从正确位置获取 Dockerfile 文件..."
        
        # 克隆官方仓库到临时目录
        git clone https://github.com/langgenius/dify.git official-repo
        
        # 检查项目根目录中的 Dockerfile 文件
        echo "检查官方仓库根目录中的 Dockerfile 文件..."
        ls -la official-repo/ | grep -i dockerfile
        
        # 从根目录复制 Dockerfile 文件到 docker 目录
        mkdir -p docker
        
        # 复制可能的 Dockerfile 文件
        if [ -f "official-repo/Dockerfile.api" ]; then
          echo "复制 Dockerfile.api..."
          cp official-repo/Dockerfile.api docker/
        fi
        
        if [ -f "official-repo/Dockerfile.web" ]; then
          echo "复制 Dockerfile.web..."
          cp official-repo/Dockerfile.web docker/
        fi
        
        if [ -f "official-repo/Dockerfile.worker" ]; then
          echo "复制 Dockerfile.worker..."
          cp official-repo/Dockerfile.worker docker/
        fi
        
        # 如果没有找到特定命名的 Dockerfile，尝试查找其他可能的名称
        if [ ! -f "docker/Dockerfile.api" ]; then
          echo "尝试查找其他可能的 Dockerfile 名称..."
          # 查找所有可能的 Dockerfile
          find official-repo -name "*Dockerfile*" -type f | head -10
          
          # 尝试复制通用的 Dockerfile
          if [ -f "official-repo/Dockerfile" ]; then
            echo "复制通用 Dockerfile 作为 Dockerfile.api..."
            cp official-repo/Dockerfile docker/Dockerfile.api
          fi
        fi
        
        # 同步其他必要文件
        for file in uv.lock pyproject.toml; do
          if [ -f "official-repo/$file" ]; then
            echo "同步 $file..."
            cp official-repo/$file ./
          fi
        done
        
        # 验证获取的文件
        echo "验证获取的文件:"
        ls -la docker/
        if [ -f "docker/Dockerfile.api" ]; then
          echo "Dockerfile.api 内容预览:"
          head -n 5 docker/Dockerfile.api
        else
          echo "错误: 仍然无法找到 Dockerfile.api"
          exit 1
        fi
        
        # 清理临时目录
        rm -rf official-repo

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push API image
      run: |
        echo "当前工作目录: $(pwd)"
        echo "docker 目录内容:"
        ls -la docker/
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-api:latest -f docker/Dockerfile.api .
        docker push ghcr.io/${{ github.repository_owner }}/dify-api:latest

    - name: Build and push Web image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-web:latest -f docker/Dockerfile.web .
        docker push ghcr.io/${{ github.repository_owner }}/dify-web:latest

    - name: Build and push Worker image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-worker:latest -f docker/Dockerfile.worker .
        docker push ghcr.io/${{ github.repository_owner }}/dify-worker:latest

    - name: Pull and push base images
      run: |
        docker pull nginx:alpine
        docker tag nginx:alpine ghcr.io/${{ github.repository_owner }}/nginx:alpine
        docker push ghcr.io/${{ github.repository_owner }}/nginx:alpine

        docker pull postgres:13
        docker tag postgres:13 ghcr.io/${{ github.repository_owner }}/postgres:13
        docker push ghcr.io/${{ github.repository_owner }}/postgres:13

        docker pull redis:6-alpine
        docker tag redis:6-alpine ghcr.io/${{ github.repository_owner }}/redis:6-alpine
        docker push ghcr.io/${{ github.repository_owner }}/redis:6-alpine
