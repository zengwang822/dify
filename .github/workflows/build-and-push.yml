name: Build and Push Dify Images to GHCR

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        # 确保检出完整的提交历史，以便后续比较
        fetch-depth: 0

    # 新增步骤：克隆官方仓库并同步必要文件
    - name: Sync with official repository
      run: |
        echo "正在克隆官方 Dify 仓库..."
        
        # 克隆官方仓库到临时目录
        git clone https://github.com/langgenius/dify.git official-repo
        
        echo "官方仓库克隆完成，开始同步必要文件..."
        
        # 检查官方仓库中是否有 docker 目录
        echo "官方仓库目录结构:"
        ls -la official-repo/
        
        # 同步 docker 目录
        if [ -d "official-repo/docker" ]; then
          echo "同步 docker 目录..."
          echo "官方 docker 目录内容:"
          ls -la official-repo/docker/
          
          # 删除现有的 docker 目录（如果有）
          if [ -d "docker" ]; then
            rm -rf docker
          fi
          
          # 复制 docker 目录
          cp -r official-repo/docker ./
          
          echo "同步后的 docker 目录内容:"
          ls -la docker/
          
          # 特别检查 Dockerfile.api
          if [ -f "docker/Dockerfile.api" ]; then
            echo "Dockerfile.api 内容预览:"
            head -n 5 docker/Dockerfile.api
          else
            echo "错误: Dockerfile.api 不存在于 docker 目录中"
            echo "官方 docker 目录中的文件:"
            ls -la official-repo/docker/
            exit 1
          fi
        else
          echo "错误: 官方仓库中没有 docker 目录"
          echo "官方仓库内容:"
          ls -la official-repo/
          exit 1
        fi
        
        # 同步根目录下的必要文件
        for file in uv.lock pyproject.toml; do
          if [ -f "official-repo/$file" ]; then
            echo "同步 $file..."
            cp official-repo/$file ./
          else
            echo "警告: 官方仓库中没有 $file 文件"
          fi
        done
        
        # 清理临时目录
        rm -rf official-repo
        
        echo "文件同步完成"

    # 添加验证步骤，确保文件存在
    - name: Verify files exist
      run: |
        echo "验证必要文件是否存在..."
        if [ -f "docker/Dockerfile.api" ]; then
          echo "✓ Dockerfile.api 存在"
          echo "文件大小: $(wc -l < docker/Dockerfile.api) 行"
        else
          echo "✗ Dockerfile.api 不存在"
          exit 1
        fi
        
        if [ -f "docker/Dockerfile.web" ]; then
          echo "✓ Dockerfile.web 存在"
        else
          echo "✗ Dockerfile.web 不存在"
        fi
        
        if [ -f "docker/Dockerfile.worker" ]; then
          echo "✓ Dockerfile.worker 存在"
        else
          echo "✗ Dockerfile.worker 不存在"
        fi

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push API image
      run: |
        echo "当前工作目录: $(pwd)"
        echo "docker 目录内容:"
        ls -la docker/
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-api:latest -f docker/Dockerfile.api .
        docker push ghcr.io/${{ github.repository_owner }}/dify-api:latest

    - name: Build and push Web image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-web:latest -f docker/Dockerfile.web .
        docker push ghcr.io/${{ github.repository_owner }}/dify-web:latest

    - name: Build and push Worker image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-worker:latest -f docker/Dockerfile.worker .
        docker push ghcr.io/${{ github.repository_owner }}/dify-worker:latest

    - name: Pull and push base images
      run: |
        # 拉取基础镜像并推送到 GHCR
        docker pull nginx:alpine
        docker tag nginx:alpine ghcr.io/${{ github.repository_owner }}/nginx:alpine
        docker push ghcr.io/${{ github.repository_owner }}/nginx:alpine

        docker pull postgres:13
        docker tag postgres:13 ghcr.io/${{ github.repository_owner }}/postgres:13
        docker push ghcr.io/${{ github.repository_owner }}/postgres:13

        docker pull redis:6-alpine
        docker tag redis:6-alpine ghcr.io/${{ github.repository_owner }}/redis:6-alpine
        docker push ghcr.io/${{ github.repository_owner }}/redis:6-alpine
