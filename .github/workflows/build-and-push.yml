name: Build and Push Dify Images to GHCR

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 修改步骤：从正确位置获取 Dockerfile 文件
    - name: Get Dockerfiles from correct locations
      run: |
        echo "正在从正确位置获取 Dockerfile 文件..."
        
        # 克隆官方仓库到临时目录
        git clone https://github.com/langgenius/dify.git official-repo
        
        # 检查项目根目录中的 Dockerfile 文件
        echo "检查官方仓库根目录中的 Dockerfile 文件..."
        ls -la official-repo/ | grep -i dockerfile || echo "根目录中没有 Dockerfile 文件（这是正常的）"
        
        # 检查各个子目录中的 Dockerfile
        echo "检查 api 目录中的 Dockerfile..."
        find official-repo/api -name "*Dockerfile*" -type f 2>/dev/null || echo "api 目录中没有找到 Dockerfile"
        
        echo "检查 web 目录中的 Dockerfile..."
        find official-repo/web -name "*Dockerfile*" -type f 2>/dev/null || echo "web 目录中没有找到 Dockerfile"
        
        echo "检查 worker 目录中的 Dockerfile..."
        find official-repo/worker -name "*Dockerfile*" -type f 2>/dev/null || echo "worker 目录中没有找到 Dockerfile"
        
        # 创建 docker 目录
        mkdir -p docker
        
        # 尝试从各个可能的位置复制 Dockerfile
        echo "尝试从各个可能的位置复制 Dockerfile..."
        
        # 尝试复制 API Dockerfile
        if [ -f "official-repo/api/Dockerfile" ]; then
          echo "复制 api/Dockerfile 作为 Dockerfile.api..."
          cp official-repo/api/Dockerfile docker/Dockerfile.api
        elif [ -f "official-repo/Dockerfile.api" ]; then
          echo "复制根目录的 Dockerfile.api..."
          cp official-repo/Dockerfile.api docker/Dockerfile.api
        else
          echo "无法找到 API Dockerfile，创建默认的..."
          echo "FROM python:3.9-slim\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]" > docker/Dockerfile.api
        fi
        
        # 尝试复制 Web Dockerfile
        if [ -f "official-repo/web/Dockerfile" ]; then
          echo "复制 web/Dockerfile 作为 Dockerfile.web..."
          cp official-repo/web/Dockerfile docker/Dockerfile.web
        elif [ -f "official-repo/Dockerfile.web" ]; then
          echo "复制根目录的 Dockerfile.web..."
          cp official-repo/Dockerfile.web docker/Dockerfile.web
        else
          echo "无法找到 Web Dockerfile，创建默认的..."
          echo "FROM node:16-alpine\nWORKDIR /app\nCOPY . .\nRUN npm install\nRUN npm run build\nCMD [\"npm\", \"start\"]" > docker/Dockerfile.web
        fi
        
        # 尝试复制 Worker Dockerfile
        if [ -f "official-repo/worker/Dockerfile" ]; then
          echo "复制 worker/Dockerfile 作为 Dockerfile.worker..."
          cp official-repo/worker/Dockerfile docker/Dockerfile.worker
        elif [ -f "official-repo/Dockerfile.worker" ]; then
          echo "复制根目录的 Dockerfile.worker..."
          cp official-repo/Dockerfile.worker docker/Dockerfile.worker
        else
          echo "无法找到 Worker Dockerfile，创建默认的..."
          echo "FROM python:3.9-slim\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\nCMD [\"celery\", \"-A\", \"app.celery\", \"worker\", \"--loglevel=info\"]" > docker/Dockerfile.worker
        fi
        
        # 同步其他必要文件
        for file in uv.lock pyproject.toml; do
          if [ -f "official-repo/$file" ]; then
            echo "同步 $file..."
            cp official-repo/$file ./
          else
            echo "警告: 官方仓库中没有 $file 文件"
          fi
        done
        
        # 验证获取的文件
        echo "验证获取的文件:"
        ls -la docker/
        if [ -f "docker/Dockerfile.api" ]; then
          echo "Dockerfile.api 内容预览:"
          head -n 5 docker/Dockerfile.api
        else
          echo "错误: 仍然无法找到或创建 Dockerfile.api"
          exit 1
        fi
        
        # 清理临时目录
        rm -rf official-repo

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push API image
      run: |
        echo "当前工作目录: $(pwd)"
        echo "docker 目录内容:"
        ls -la docker/
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-api:latest -f docker/Dockerfile.api .
        docker push ghcr.io/${{ github.repository_owner }}/dify-api:latest

    - name: Build and push Web image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-web:latest -f docker/Dockerfile.web .
        docker push ghcr.io/${{ github.repository_owner }}/dify-web:latest

    - name: Build and push Worker image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-worker:latest -f docker/Dockerfile.worker .
        docker push ghcr.io/${{ github.repository_owner }}/dify-worker:latest

    - name: Pull and push base images
      run: |
        docker pull nginx:alpine
        docker tag nginx:alpine ghcr.io/${{ github.repository_owner }}/nginx:alpine
        docker push ghcr.io/${{ github.repository_owner }}/nginx:alpine

        docker pull postgres:13
        docker tag postgres:13 ghcr.io/${{ github.repository_owner }}/postgres:13
        docker push ghcr.io/${{ github.repository_owner }}/postgres:13

        docker pull redis:6-alpine
        docker tag redis:6-alpine ghcr.io/${{ github.repository_owner }}/redis:6-alpine
        docker push ghcr.io/${{ github.repository_owner }}/redis:6-alpine
