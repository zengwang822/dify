name: Build and Push Dify Images to GHCR

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # 获取 Dockerfile 文件
    - name: Get Dockerfiles from correct locations
      run: |
        echo "正在从正确位置获取 Dockerfile 文件..."
        
        # 克隆官方仓库到临时目录
        git clone https://github.com/langgenius/dify.git official-repo
        
        # 创建 docker 目录
        mkdir -p docker
        
        # 复制 Dockerfile 文件
        if [ -f "official-repo/api/Dockerfile" ]; then
          echo "复制 api/Dockerfile 作为 Dockerfile.api..."
          cp official-repo/api/Dockerfile docker/Dockerfile.api
        fi
        
        if [ -f "official-repo/web/Dockerfile" ]; then
          echo "复制 web/Dockerfile 作为 Dockerfile.web..."
          cp official-repo/web/Dockerfile docker/Dockerfile.web
        fi
        
        if [ -f "official-repo/worker/Dockerfile" ]; then
          echo "复制 worker/Dockerfile 作为 Dockerfile.worker..."
          cp official-repo/worker/Dockerfile docker/Dockerfile.worker
        fi
        
        # 复制 entrypoint.sh
        if [ -f "official-repo/docker/entrypoint.sh" ]; then
          echo "复制 entrypoint.sh..."
          cp official-repo/docker/entrypoint.sh docker/
          chmod +x docker/entrypoint.sh
        else
          echo "创建默认的 entrypoint.sh..."
          echo '#!/bin/bash
set -e

# 等待数据库就绪
if [ "$WAIT_FOR_DB" = "true" ]; then
  until pg_isready -h $POSTGRES_HOST -p $POSTGRES_PORT -U $POSTGRES_USER; do
    echo "等待数据库连接..."
    sleep 1
  done
fi

# 执行主命令
exec "$@"' > docker/entrypoint.sh
          chmod +x docker/entrypoint.sh
        fi
        
        # 复制其他必要文件
        for file in uv.lock pyproject.toml; do
          if [ -f "official-repo/$file" ]; then
            echo "复制 $file..."
            cp official-repo/$file ./
          else
            echo "警告: 官方仓库中没有 $file 文件"
          fi
        done
        
        # 验证获取的文件
        echo "验证获取的文件:"
        ls -la docker/
        ls -la uv.lock pyproject.toml 2>/dev/null || echo "uv.lock 或 pyproject.toml 不存在"
        
        # 清理临时目录
        rm -rf official-repo

    # 验证所有必要文件都存在
    - name: Verify all required files exist
      run: |
        echo "验证所有必要文件是否存在..."
        
        required_files=(
          "docker/Dockerfile.api"
          "docker/Dockerfile.web"
          "docker/Dockerfile.worker"
          "docker/entrypoint.sh"
        )
        
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✓ $file 存在"
          else
            echo "✗ $file 不存在"
            exit 1
          fi
        done
        
        # uv.lock 和 pyproject.toml 是可选的，但最好有
        for file in uv.lock pyproject.toml; do
          if [ -f "$file" ]; then
            echo "✓ $file 存在"
          else
            echo "警告: $file 不存在，可能会影响构建"
          fi
        done

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push API image
      run: |
        echo "当前工作目录: $(pwd)"
        echo "docker 目录内容:"
        ls -la docker/
        echo "根目录内容:"
        ls -la | grep -E "(uv.lock|pyproject.toml)"
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-api:latest -f docker/Dockerfile.api .
        docker push ghcr.io/${{ github.repository_owner }}/dify-api:latest

    - name: Build and push Web image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-web:latest -f docker/Dockerfile.web .
        docker push ghcr.io/${{ github.repository_owner }}/dify-web:latest

    - name: Build and push Worker image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-worker:latest -f docker/Dockerfile.worker .
        docker push ghcr.io/${{ github.repository_owner }}/dify-worker:latest

    - name: Pull and push base images
      run: |
        docker pull nginx:alpine
        docker tag nginx:alpine ghcr.io/${{ github.repository_owner }}/nginx:alpine
        docker push ghcr.io/${{ github.repository_owner }}/nginx:alpine

        docker pull postgres:13
        docker tag postgres:13 ghcr.io/${{ github.repository_owner }}/postgres:13
        docker push ghcr.io/${{ github.repository_owner }}/postgres:13

        docker pull redis:6-alpine
        docker tag redis:6-alpine ghcr.io/${{ github.repository_owner }}/redis:6-alpine
        docker push ghcr.io/${{ github.repository_owner }}/redis:6-alpine
