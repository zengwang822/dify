name: Build and Push Dify Images to GHCR

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 新增步骤：下载缺失的 Dockerfile 文件（改进版本）
    - name: Download missing Dockerfiles
      run: |
        echo "下载缺失的 Dockerfile 文件..."
        
        # 创建 docker 目录（如果不存在）
        mkdir -p docker
        
        # 定义 Dockerfile 下载函数，带重试和验证
        download_dockerfile() {
          local filename=$1
          local url="https://raw.githubusercontent.com/langgenius/dify/main/$filename"
          local output_path="docker/$filename"
          
          echo "下载 $filename..."
          
          # 尝试下载，最多重试3次
          for i in {1..3}; do
            if curl -sS -f -o "$output_path" "$url"; then
              # 检查文件内容是否有效（不是404页面）
              if grep -q "404: Not Found" "$output_path"; then
                echo "错误: $filename 下载返回404，尝试备用方案..."
                rm "$output_path"
                break
              else
                echo "$filename 下载成功"
                return 0
              fi
            else
              echo "尝试 $i/3 失败，等待 5 秒后重试..."
              sleep 5
            fi
          done
          
          # 如果官方仓库下载失败，尝试从其他可能的位置下载
          echo "尝试备用下载源..."
          if [ "$filename" = "Dockerfile.api" ]; then
            # 尝试从项目根目录下载
            curl -sS -f -o "$output_path" "https://raw.githubusercontent.com/langgenius/dify/main/api/Dockerfile" || \
            # 如果还失败，创建一个基本的 Dockerfile
            echo "FROM python:3.9-slim\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\nCMD [\"python\", \"app.py\"]" > "$output_path"
          elif [ "$filename" = "Dockerfile.web" ]; then
            curl -sS -f -o "$output_path" "https://raw.githubusercontent.com/langgenius/dify/main/web/Dockerfile" || \
            echo "FROM node:16-alpine\nWORKDIR /app\nCOPY . .\nRUN npm install\nRUN npm run build\nCMD [\"npm\", \"start\"]" > "$output_path"
          elif [ "$filename" = "Dockerfile.worker" ]; then
            curl -sS -f -o "$output_path" "https://raw.githubusercontent.com/langgenius/dify/main/worker/Dockerfile" || \
            echo "FROM python:3.9-slim\nWORKDIR /app\nCOPY . .\nRUN pip install -r requirements.txt\nCMD [\"celery\", \"-A\", \"app.celery\", \"worker\", \"--loglevel=info\"]" > "$output_path"
          fi
          
          echo "$filename 已创建/下载"
        }
        
        # 下载所需的 Dockerfile
        download_dockerfile "Dockerfile.api"
        download_dockerfile "Dockerfile.web"
        download_dockerfile "Dockerfile.worker"
        
        # 验证下载的文件
        echo "验证下载的文件:"
        ls -la docker/
        echo "Dockerfile.api 内容:"
        head -n 10 docker/Dockerfile.api

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.GHCR_TOKEN }}

    - name: Build and push API image
      working-directory: ./
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-api:latest -f docker/Dockerfile.api .
        docker push ghcr.io/${{ github.repository_owner }}/dify-api:latest

    - name: Build and push Web image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-web:latest -f docker/Dockerfile.web .
        docker push ghcr.io/${{ github.repository_owner }}/dify-web:latest

    - name: Build and push Worker image
      run: |
        docker build -t ghcr.io/${{ github.repository_owner }}/dify-worker:latest -f docker/Dockerfile.worker .
        docker push ghcr.io/${{ github.repository_owner }}/dify-worker:latest

    - name: Pull and push base images
      run: |
        # 拉取基础镜像并推送到 GHCR
        docker pull nginx:alpine
        docker tag nginx:alpine ghcr.io/${{ github.repository_owner }}/nginx:alpine
        docker push ghcr.io/${{ github.repository_owner }}/nginx:alpine

        docker pull postgres:13
        docker tag postgres:13 ghcr.io/${{ github.repository_owner }}/postgres:13
        docker push ghcr.io/${{ github.repository_owner }}/postgres:13

        docker pull redis:6-alpine
        docker tag redis:6-alpine ghcr.io/${{ github.repository_owner }}/redis:6-alpine
        docker push ghcr.io/${{ github.repository_owner }}/redis:6-alpine
